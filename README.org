#+TITLE: Database Project spring 2024
#+AUTHOR: That One Team
:PROPERTIES:
#+LATEX_CLASS: article
#+STARTUP: overview
#+OPTIONS: toc:nil
#+OPTIONS: todo:nil
#+OPTIONS: H:6
#+OPTIONS: num:0
#+LATEX_HEADER: \usepackage[margin=.75in]{geometry}
#+LATEX_HEADER_EXTRA: \usepackage{tikz}
#+LATEX_HEADER_EXTRA: \usepackage{graphicx}
:END:
* Getting Started
Welcome Team members! We have been tasked with creating a database, There are a few things to make sure of before we embark upon this journey.
1. Have a Github account
2. Have an [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys][SSH]] or [[https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys][GPG]] key setup
   * *Set this up for both authorization and [[https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification][signing]].*
3. Pull the Repo.
4. Create a [[*Creating A Branch][Branch]] with your name.
   - Check out this branch before you start working.
5. Add your name and ID to the README.
   - The README is an [[https://orgmode.org/][org document]].
   - It is a form of markdown (can be converted to HTML if we need to write a front end.)
   - for the full org mode editing use the [[https://www.gnu.org/software/emacs/][Emacs]] text editor. (This is not required any editor will work.)
6. Add and Commit your changes to the branch you created. 
   - Make sure to sign your commits
7. Push your branch to the repo.
8. Go to Github and create a pull request.
9. Check out the [[*Repository Rules][Repository]] section of the README
10. Check out the discussion board.
11. Have Fun!

** Team Members
#+attr_html: :align center :border 2 :frame border
|----------------+-----------|
| Name           | ID        |
|----------------+-----------|
| Jachin Minyard | jsm220000 |
|                |           |
|                |           |
|                |           |
|----------------+-----------|

** Repository Rules
This section will describe some general practices of github that we should ad hear to. I am down for discussion on these if we decided we want to change it but in the industry it is not uncommon to find stricter rules on repositories so now is as good a time as any to start getting used to it.

*** Restricted Deletions
Only Allow Users with bypass permissions to delete matching refs. This is a safety precaution to keep the entire repo from accidentally being deleted.

*** All Commits Must be signed commits.
This just means that you need to have an SSH or a GPG key linked to your account. You can follow the links below for guides on that. After the keys are set up and you have told git about the signing key when commiting to the repo use the command. I would recommend setting up an ssh key as that is what I have set up and will be better able to help if there are any problems.
- SSH Instructions
  - [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys][Checking for existing keys]]
  - [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][Generating New Keys]]
  - [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account][Adding Keys to your account]]
  - [[https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key][Telling Git about the Keys]]
- GPG Instructions
  - [[https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys][Checking for existing keys]]
  - [[https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key][Generating New Keys]]
  - [[https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account][Adding Keys to your account]]
  - [[https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key][Telling Git about the Keys]]
    
#+begin_src bash
  git commit -S -m "Place the commit message here."
#+end_src
This command makes sure that the commit is signed with your key when you push it to the repo.

*** Require a Pull request before Merging
This in my opinion is just a good option to have enable so that everyone is more up to date on what is happening to the code base. It will only require one approval. The idea here is if two people are working on the back end and another two are working on the front end then those teams can use this to stay upto date with each others changes and catch any bugs before we introduce them into the codebase. In addition I set the following sub options.
**** Dismiss stale pull request approvals when new commits are pushed
any old commits will be discarded if a new commit is push. This one I am not to sure about and we can turn this off but I think its to keep old request from stacking up if the codebase gets that far ahead of where that commit was.
**** Require approval of the most recent reviewable push
Someone other than the pusher must review the code.
*** Block Force Pushing
This one is straight forward keeps people from accidentally pushing and overwriting an important branch such as the main branch.

** Creating A Branch
This is a simple process that can be done in the terminal or in the github interface. This is an example of how to do this in the terminal.
*** Creating the Branch
The following command will create a branch but will not switch to it.
#+begin_src bash
  git branch <Branch Name>
#+end_src
Alternately you can use the following command to create and switch to the branch.
#+begin_src bash
  git checkout -b <Branch Name>
#+end_src
*** Switching to the Branch
If When creating the branch you used 'git branch' and not 'git checkout' Then the following command will checkout an already created branch
#+begin_src bash
  git checkout <Branch Name>
#+end_src
*** Pushing the Branch
In order to be able to push the branch it need to be added to the remote repo. This is done with the following command.
#+begin_src bash
  git push -u origin <Branch Name>
#+end_src
*** Creating the Pull Request
